import java.nio.file.Files
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.8.21'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id "xyz.jpenilla.run-paper" version "2.0.1"
    id "io.papermc.paperweight.userdev" version "1.5.3"
}

group = 'xyz.bluspring'
version = '1.0-SNAPSHOT'

runServer {
    minecraftVersion "1.19.2"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public/"
    }
    maven {
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    paperweightDevelopmentBundle "io.papermc.paper:dev-bundle:1.19.2-R0.1-SNAPSHOT"

    implementation "dev.jorel:commandapi-kotlin:8.8.0"
    implementation "dev.jorel:commandapi-shade:8.8.0"
    implementation 'xyz.jpenilla:reflection-remapper:0.1.0-SNAPSHOT'
}

shadowJar {
    relocate "org.jetbrains", "xyz.bluspring.shade.onthequest.jetbrains"
    relocate "kotlin", "xyz.bluspring.shade.onthequest.kotlin"
    relocate "kotlinx", "xyz.bluspring.shade.onthequest.kotlinx"
    relocate "dev.jorel", "xyz.bluspring.shade.onthequest.jorel"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.register("createDatapack") {
    it.doFirst {
        File path = new File(project.buildDir, "otq_DONOTMODIFY.zip")
        ZipOutputStream output = new ZipOutputStream(new FileOutputStream(path))

        var root = new File(project.rootDir, "src/main/resources/data");
        Files.walk(root.toPath())
                .forEach {
                    if (!it.toFile().isFile())
                        return

                    output.putNextEntry(new ZipEntry("data/" + it.toString().replace(root.toString(), "")))

                    output.write(it.toFile().readBytes())
                    output.closeEntry()
                }

        output.putNextEntry(new ZipEntry("pack.mcmeta"))

        var text = "{\"pack\": {\"pack_format\": 10, \"description\": \"OnTheQuest internal datapack. DO NOT MODIFY.\"}}"
        output.write(text.getBytes("UTF-8"))
        output.closeEntry()

        output.close()
    }

    it.doLast {
        File path = new File(project.buildDir, "otq_DONOTMODIFY.zip")
        File move = new File(project.rootDir, "src/main/resources/otq_DONOTMODIFY.zip")
        if (move.exists())
            move.delete()
        Files.copy(path.toPath(), move.toPath())
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
